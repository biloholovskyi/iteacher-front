import React, {useState} from 'react';
import axios from "axios";
import {connect} from "react-redux";
import {NavLink} from "react-router-dom";

import {loginUser} from "../../actions";

import LoginTabs from "./loginTabs/loginTabs";

import * as Style from './styled';

import logo from '../../assets/media/icon/logo.svg';

import ServerSettings from "../../service/serverSettings";

const Login = ({loginUser}) => {
  const [validation, setValidation] = useState(false)

  // —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
  const createToken = (user) => {
    // –≤ —Å—Ç–æ—Ä –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ–º–µ–π–ª
    const value = JSON.stringify({email: user.email});

    localStorage.setItem('iteacher_login', value);
  }

  // –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const onLogin = async (e) => {
    e.preventDefault();
    // –ø–æ–ª—É—á–∞–µ–º —Å —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const login = e.target.login.value; // email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const server = new ServerSettings();

    await axios.get(`${server.getApi()}api/users/${login}/`, {
      validateStatus: (status) => {
        return true; // I'm always returning true, you may want to do it depending on the status received
      },
    })
      .then(res => {
        console.log(res);
        // –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if (res.data.toString().includes('DoesNotExist')) {
          setValidation(true)
        } else {
          // –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞
          if (typeof res.data == "object") {
            // –∑–Ω–∞—á–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω
            // –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
            if (res.data.password === e.target.password.value) {
              loginUser(res.data);
              createToken(res.data);
            } else {
              setValidation(true)
            }
          } else {
            // –∑–Ω–∞—á–∏—Ç –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
            alert('Some error on server');
          }
        }
      }).catch(error => {
        try {
          // —Ç–∏–ø –æ—à–∏–±–∫–∏
          const typeError = error.message.data;
          // –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
          if (typeError.includes('DoesNotExist')) {
            alert('wrong password or login');
          } else {
            // –µ—Å–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞
            alert('–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ')
          }
        } catch {
          console.log('precess');
        }
      });
  }

  return (
    <Style.WithOutHeaderContainer>
      <div className={'container'}>
        <Style.SignInModalWrapp>
          <Style.SignInModal>
            <img src={logo} alt="image" className={'logo'}/>
            <h4>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å üëã</h4>
            <Style.TabsBody>
              <LoginTabs validation={validation} onLogin={onLogin}/>
            </Style.TabsBody>
          </Style.SignInModal>
          <div className={'registration_block'}>–ï—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã? <NavLink
            to='/registration'>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è</NavLink></div>
        </Style.SignInModalWrapp>
      </div>
    </Style.WithOutHeaderContainer>
  )
}

const mapStateToProps = (state) => {
  return {
    users: state.users
  }
};

const mapDispatchToProps = {
  loginUser
};

export default connect(mapStateToProps, mapDispatchToProps)(Login);